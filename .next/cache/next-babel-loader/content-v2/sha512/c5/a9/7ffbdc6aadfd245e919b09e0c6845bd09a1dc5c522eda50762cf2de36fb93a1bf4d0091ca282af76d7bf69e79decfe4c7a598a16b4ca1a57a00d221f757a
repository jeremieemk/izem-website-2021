{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/jeremie/web/50-izem-site-2021/pages/work/[uid].js\",\n    _s = $RefreshSig$();\n\nimport { useRouter } from \"next/router\";\nimport Prismic from \"prismic-javascript\";\nexport default function SinglePost(props) {\n  _s();\n\n  var router = useRouter();\n  var uid = router.query.uid;\n  console.log(\"yes\", props);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"mt-8 w-full\",\n    children: uid && /*#__PURE__*/_jsxDEV(\"span\", {\n      children: [\"Post: \", uid]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 8,\n      columnNumber: 47\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 8,\n    columnNumber: 10\n  }, this);\n} // --> use getAllPostUids to populate getStaticPaths comme dans cet example\n// export function getAllPostIds() {\n//   const fileNames = fs.readdirSync(postsDirectory);\n//   return fileNames.map((fileName) => {\n//     return {\n//       params: {\n//         id: fileName.replace(/\\.md$/, \"\"),\n//       },\n//     };\n//   });\n// }\n// export async function getStaticPaths() {\n//   const paths = getAllPostIds();\n//   return {\n//     paths,\n//     fallback: false,\n//   };\n// }\n// --> abandonner l'idée du serversideprops\n// export async function getServerSideProps() {\n//   // Fetch data from external API\n//   const apiEndpoint = \"https://izem-site-2021.cdn.prismic.io/api/v2\";\n//   const Client = Prismic.client(apiEndpoint);\n//   const data = await Client.query(\n//     // specify the data you're querying\n//     Prismic.Predicates.at(\"my.blog-post.uid\", \"izem-and-josyara\")\n//   );\n//   const post = data.results;\n//   if (!data) {\n//     return {\n//       notFound: true,\n//     };\n//   }\n//   return {\n//     props: { post }, // will be passed to the page component as props\n//   };\n// }\n\n_s(SinglePost, \"fN7XvhJ+p5oE6+Xlo0NJmXpxjC8=\", false, function () {\n  return [useRouter];\n});\n\n_c = SinglePost;\n\nvar _c;\n\n$RefreshReg$(_c, \"SinglePost\");","map":{"version":3,"sources":["/Users/jeremie/web/50-izem-site-2021/pages/work/[uid].js"],"names":["useRouter","Prismic","SinglePost","props","router","uid","query","console","log"],"mappings":";;;;;AAAA,SAASA,SAAT,QAA0B,aAA1B;AACA,OAAOC,OAAP,MAAoB,oBAApB;AAEA,eAAe,SAASC,UAAT,CAAoBC,KAApB,EAA2B;AAAA;;AACxC,MAAMC,MAAM,GAAGJ,SAAS,EAAxB;AACA,MAAMK,GAAG,GAAGD,MAAM,CAACE,KAAP,CAAaD,GAAzB;AACAE,EAAAA,OAAO,CAACC,GAAR,CAAY,KAAZ,EAAmBL,KAAnB;AACA,sBAAO;AAAK,IAAA,SAAS,EAAC,aAAf;AAAA,cAA8BE,GAAG,iBAAI;AAAA,2BAAaA,GAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAArC;AAAA;AAAA;AAAA;AAAA,UAAP;AACD,C,CAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;GA9CwBH,U;UACPF,S;;;KADOE,U","sourcesContent":["import { useRouter } from \"next/router\";\nimport Prismic from \"prismic-javascript\";\n\nexport default function SinglePost(props) {\n  const router = useRouter();\n  const uid = router.query.uid;\n  console.log(\"yes\", props);\n  return <div className=\"mt-8 w-full\">{uid && <span>Post: {uid}</span>}</div>;\n}\n\n// --> use getAllPostUids to populate getStaticPaths comme dans cet example\n// export function getAllPostIds() {\n//   const fileNames = fs.readdirSync(postsDirectory);\n//   return fileNames.map((fileName) => {\n//     return {\n//       params: {\n//         id: fileName.replace(/\\.md$/, \"\"),\n//       },\n//     };\n//   });\n// }\n\n// export async function getStaticPaths() {\n//   const paths = getAllPostIds();\n//   return {\n//     paths,\n//     fallback: false,\n//   };\n// }\n\n// --> abandonner l'idée du serversideprops\n\n// export async function getServerSideProps() {\n//   // Fetch data from external API\n//   const apiEndpoint = \"https://izem-site-2021.cdn.prismic.io/api/v2\";\n//   const Client = Prismic.client(apiEndpoint);\n//   const data = await Client.query(\n//     // specify the data you're querying\n//     Prismic.Predicates.at(\"my.blog-post.uid\", \"izem-and-josyara\")\n//   );\n//   const post = data.results;\n//   if (!data) {\n//     return {\n//       notFound: true,\n//     };\n//   }\n//   return {\n//     props: { post }, // will be passed to the page component as props\n//   };\n// }\n"]},"metadata":{},"sourceType":"module"}